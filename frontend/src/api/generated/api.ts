/* tslint:disable */
/* eslint-disable */
/**
 * Finance manager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface RestTokenRequest
 */
export interface RestTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RestTokenRequest
     */
    'idToken'?: string;
}
/**
 * 
 * @export
 * @interface RestUserResponseDTO
 */
export interface RestUserResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof RestUserResponseDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUserResponseDTO
     */
    'jwtToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUserResponseDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUserResponseDTO
     */
    'pictureUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUserResponseDTO
     */
    'userEmail'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exchanges a Google OAuth token for an app-specific JWT
         * @summary Authenticate using a Google token
         * @param {RestTokenRequest} request The google token request. Probably received from google oAuth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuth: async (request: RestTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('googleAuth', 'request', request)
            const localVarPath = `/auth/google_auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Exchanges a Google OAuth token for an app-specific JWT
         * @summary Authenticate using a Google token
         * @param {RestTokenRequest} request The google token request. Probably received from google oAuth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleAuth(request: RestTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestUserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleAuth(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.googleAuth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Exchanges a Google OAuth token for an app-specific JWT
         * @summary Authenticate using a Google token
         * @param {RestTokenRequest} request The google token request. Probably received from google oAuth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuth(request: RestTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestUserResponseDTO> {
            return localVarFp.googleAuth(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Exchanges a Google OAuth token for an app-specific JWT
     * @summary Authenticate using a Google token
     * @param {RestTokenRequest} request The google token request. Probably received from google oAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public googleAuth(request: RestTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).googleAuth(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Upload a CSV file via multipart/form-data
         * @summary Upload a CSV file
         * @param {File} file CSV file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kbcTransactionsUpload: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('kbcTransactionsUpload', 'file', file)
            const localVarPath = `/transaction/upload_kbc_csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Upload a CSV file via multipart/form-data
         * @summary Upload a CSV file
         * @param {File} file CSV file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kbcTransactionsUpload(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kbcTransactionsUpload(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.kbcTransactionsUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * Upload a CSV file via multipart/form-data
         * @summary Upload a CSV file
         * @param {File} file CSV file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kbcTransactionsUpload(file: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.kbcTransactionsUpload(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * Upload a CSV file via multipart/form-data
     * @summary Upload a CSV file
     * @param {File} file CSV file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public kbcTransactionsUpload(file: File, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).kbcTransactionsUpload(file, options).then((request) => request(this.axios, this.basePath));
    }
}



